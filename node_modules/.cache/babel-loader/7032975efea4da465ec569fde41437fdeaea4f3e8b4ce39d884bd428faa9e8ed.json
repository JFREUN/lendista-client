{"ast":null,"code":"var _jsxFileName = \"/Users/jessica/Desktop/Portfolio/Lendista/client/src/context/auth.context.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5005\";\nconst AuthContext = /*#__PURE__*/React.createContext();\nfunction AuthProviderWrapper(props) {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  const storeToken = token => {\n    localStorage.setItem(\"authToken\", token);\n  };\n  const authenticateUser = () => {\n    const storedToken = localStorage.getItem(\"authToken\");\n    if (storedToken) {\n      // We must send the JWT token in the request's \"Authorization\" Headers\n      axios.get(`${API_URL}/auth/verify`, {\n        headers: {\n          Authorization: `Bearer ${storedToken}`\n        }\n      }).then(response => {\n        // If the server verifies that JWT token is valid\n        const user = response.data;\n        // Update state variables\n        setIsLoggedIn(true);\n        setIsLoading(false);\n        setUser(user);\n      }).catch(error => {\n        // If the server sends an error response (invalid token)\n        // Update state variables\n        setIsLoggedIn(false);\n        setIsLoading(false);\n        setUser(null);\n      });\n    } else {\n      // If the token is not available (or is removed)\n      setIsLoggedIn(false);\n      setIsLoading(false);\n      setUser(null);\n    }\n  };\n  const removeToken = () => {\n    // <== ADD\n    // Upon logout, remove the token from the localStorage\n    localStorage.removeItem(\"authToken\");\n  };\n  const logOutUser = () => {\n    // <== ADD    \n    // To log out the user, remove the token\n    removeToken();\n    // and update the state variables    \n    authenticateUser();\n  };\n  useEffect(() => {\n    //  <==  ADD\n    authenticateUser();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      isLoading,\n      user,\n      storeToken,\n      authenticateUser,\n      logOutUser\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProviderWrapper, \"/wkMYUExdyWtGyjS2AwugXhX2sw=\");\n_c = AuthProviderWrapper;\nexport { AuthProviderWrapper, AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_URL","AuthContext","createContext","AuthProviderWrapper","props","_s","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","user","setUser","storeToken","token","localStorage","setItem","authenticateUser","storedToken","getItem","get","headers","Authorization","then","response","data","catch","error","removeToken","removeItem","logOutUser","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jessica/Desktop/Portfolio/Lendista/client/src/context/auth.context.js"],"sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:5005\";\n\nconst AuthContext = React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  const storeToken = (token) => {\n    localStorage.setItem(\"authToken\", token);\n  };\n\n  const authenticateUser = () => {\n\n    const storedToken = localStorage.getItem(\"authToken\");\n\n    if (storedToken) {\n      // We must send the JWT token in the request's \"Authorization\" Headers\n      axios\n        .get(`${API_URL}/auth/verify`, {\n          headers: { Authorization: `Bearer ${storedToken}` },\n        })\n        .then((response) => {\n          // If the server verifies that JWT token is valid\n          const user = response.data;\n          // Update state variables\n          setIsLoggedIn(true);\n          setIsLoading(false);\n          setUser(user);\n        })\n        .catch((error) => {\n          // If the server sends an error response (invalid token)\n          // Update state variables\n          setIsLoggedIn(false);\n          setIsLoading(false);\n          setUser(null);\n        });\n    } else {\n      // If the token is not available (or is removed)\n      setIsLoggedIn(false);\n      setIsLoading(false);\n      setUser(null);\n    }\n  };\n\n  const removeToken = () => {                    // <== ADD\n    // Upon logout, remove the token from the localStorage\n    localStorage.removeItem(\"authToken\");\n  }\n \n \n  const logOutUser = () => {                   // <== ADD    \n    // To log out the user, remove the token\n    removeToken();\n    // and update the state variables    \n    authenticateUser();\n  }  \n\n  useEffect(() => {\n    //  <==  ADD\n    authenticateUser();\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn,\n        isLoading,\n        user,\n        storeToken,\n        authenticateUser,\n        logOutUser  \n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n}\n\nexport { AuthProviderWrapper, AuthContext };\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,MAAMC,WAAW,gBAAGP,KAAK,CAACQ,aAAa,CAAC,CAAC;AAEzC,SAASC,mBAAmBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMiB,UAAU,GAAIC,KAAK,IAAK;IAC5BC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,KAAK,CAAC;EAC1C,CAAC;EAED,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;IAE7B,MAAMC,WAAW,GAAGH,YAAY,CAACI,OAAO,CAAC,WAAW,CAAC;IAErD,IAAID,WAAW,EAAE;MACf;MACApB,KAAK,CACFsB,GAAG,CAAE,GAAEnB,OAAQ,cAAa,EAAE;QAC7BoB,OAAO,EAAE;UAAEC,aAAa,EAAG,UAASJ,WAAY;QAAE;MACpD,CAAC,CAAC,CACDK,IAAI,CAAEC,QAAQ,IAAK;QAClB;QACA,MAAMb,IAAI,GAAGa,QAAQ,CAACC,IAAI;QAC1B;QACAjB,aAAa,CAAC,IAAI,CAAC;QACnBE,YAAY,CAAC,KAAK,CAAC;QACnBE,OAAO,CAACD,IAAI,CAAC;MACf,CAAC,CAAC,CACDe,KAAK,CAAEC,KAAK,IAAK;QAChB;QACA;QACAnB,aAAa,CAAC,KAAK,CAAC;QACpBE,YAAY,CAAC,KAAK,CAAC;QACnBE,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC;IACN,CAAC,MAAM;MACL;MACAJ,aAAa,CAAC,KAAK,CAAC;MACpBE,YAAY,CAAC,KAAK,CAAC;MACnBE,OAAO,CAAC,IAAI,CAAC;IACf;EACF,CAAC;EAED,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IAAqB;IAC7C;IACAb,YAAY,CAACc,UAAU,CAAC,WAAW,CAAC;EACtC,CAAC;EAGD,MAAMC,UAAU,GAAGA,CAAA,KAAM;IAAoB;IAC3C;IACAF,WAAW,CAAC,CAAC;IACb;IACAX,gBAAgB,CAAC,CAAC;EACpB,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd;IACAoB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA,CAACE,WAAW,CAAC6B,QAAQ;IACnBC,KAAK,EAAE;MACLzB,UAAU;MACVE,SAAS;MACTE,IAAI;MACJE,UAAU;MACVI,gBAAgB;MAChBa;IACF,CAAE;IAAAG,QAAA,EAED5B,KAAK,CAAC4B;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B;AAAC/B,EAAA,CA1EQF,mBAAmB;AAAAkC,EAAA,GAAnBlC,mBAAmB;AA4E5B,SAASA,mBAAmB,EAAEF,WAAW;AAAG,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}