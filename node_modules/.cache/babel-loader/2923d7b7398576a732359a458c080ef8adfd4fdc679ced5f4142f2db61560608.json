{"ast":null,"code":"var _jsxFileName = \"/Users/jessica/Desktop/Portfolio/Lendista/client/src/context/auth.context.js\",\n  _s = $RefreshSig$();\n// src/context/auth.context.js\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5005\";\nconst AuthContext = /*#__PURE__*/React.createContext();\nfunction AuthProviderWrapper(props) {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  const storeToken = token => {\n    //  <==  ADD\n    localStorage.setItem('authToken', token);\n  };\n  const authenticateUser = () => {\n    //  <==  ADD  \n    // Get the stored token from the localStorage\n    const storedToken = localStorage.getItem('authToken');\n\n    // If the token exists in the localStorage\n    if (storedToken) {\n      // We must send the JWT token in the request's \"Authorization\" Headers\n      axios.get(`${API_URL}/auth/verify`, {\n        headers: {\n          Authorization: `Bearer ${storedToken}`\n        }\n      }).then(response => {\n        // If the server verifies that JWT token is valid  \n        const user = response.data;\n        // Update state variables        \n        setIsLoggedIn(true);\n        setIsLoading(false);\n        setUser(user);\n      }).catch(error => {\n        // If the server sends an error response (invalid token) \n        // Update state variables         \n        setIsLoggedIn(false);\n        setIsLoading(false);\n        setUser(null);\n      });\n    } else {\n      // If the token is not available (or is removed)\n      setIsLoggedIn(false);\n      setIsLoading(false);\n      setUser(null);\n    }\n  };\n  useEffect(() => {//  <==  ADD                                   \n    // to be updated in next step\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      isLoading,\n      user,\n      storeToken\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProviderWrapper, \"/wkMYUExdyWtGyjS2AwugXhX2sw=\");\n_c = AuthProviderWrapper;\nexport { AuthProviderWrapper, AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_URL","AuthContext","createContext","AuthProviderWrapper","props","_s","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","user","setUser","storeToken","token","localStorage","setItem","authenticateUser","storedToken","getItem","get","headers","Authorization","then","response","data","catch","error","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jessica/Desktop/Portfolio/Lendista/client/src/context/auth.context.js"],"sourcesContent":["// src/context/auth.context.js\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:5005\";\n\nconst AuthContext = React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  \n  const storeToken = (token) => {       //  <==  ADD\n    localStorage.setItem('authToken', token);\n  }\n  \n  const authenticateUser = () => {           //  <==  ADD  \n    // Get the stored token from the localStorage\n    const storedToken = localStorage.getItem('authToken');\n    \n    // If the token exists in the localStorage\n    if (storedToken) {\n      // We must send the JWT token in the request's \"Authorization\" Headers\n      axios.get(\n        `${API_URL}/auth/verify`, \n        { headers: { Authorization: `Bearer ${storedToken}`} }\n      )\n      .then((response) => {\n        // If the server verifies that JWT token is valid  \n        const user = response.data;\n       // Update state variables        \n        setIsLoggedIn(true);\n        setIsLoading(false);\n        setUser(user);        \n      })\n      .catch((error) => {\n        // If the server sends an error response (invalid token) \n        // Update state variables         \n        setIsLoggedIn(false);\n        setIsLoading(false);\n        setUser(null);        \n      });      \n    } else {\n      // If the token is not available (or is removed)\n        setIsLoggedIn(false);\n        setIsLoading(false);\n        setUser(null);      \n    }   \n  }\n \n  \n  useEffect(() => {                 //  <==  ADD                                   \n    // to be updated in next step\n  }, []);\n \n\n  return (                                                   \n    <AuthContext.Provider \n      value={{ \n        isLoggedIn,\n        isLoading,\n        user,\n        storeToken  \n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  )\n}\n\nexport { AuthProviderWrapper, AuthContext };\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,MAAMC,WAAW,gBAAGP,KAAK,CAACQ,aAAa,CAAC,CAAC;AAEzC,SAASC,mBAAmBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAGtC,MAAMiB,UAAU,GAAIC,KAAK,IAAK;IAAQ;IACpCC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,KAAK,CAAC;EAC1C,CAAC;EAED,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;IAAY;IACzC;IACA,MAAMC,WAAW,GAAGH,YAAY,CAACI,OAAO,CAAC,WAAW,CAAC;;IAErD;IACA,IAAID,WAAW,EAAE;MACf;MACApB,KAAK,CAACsB,GAAG,CACN,GAAEnB,OAAQ,cAAa,EACxB;QAAEoB,OAAO,EAAE;UAAEC,aAAa,EAAG,UAASJ,WAAY;QAAC;MAAE,CACvD,CAAC,CACAK,IAAI,CAAEC,QAAQ,IAAK;QAClB;QACA,MAAMb,IAAI,GAAGa,QAAQ,CAACC,IAAI;QAC3B;QACCjB,aAAa,CAAC,IAAI,CAAC;QACnBE,YAAY,CAAC,KAAK,CAAC;QACnBE,OAAO,CAACD,IAAI,CAAC;MACf,CAAC,CAAC,CACDe,KAAK,CAAEC,KAAK,IAAK;QAChB;QACA;QACAnB,aAAa,CAAC,KAAK,CAAC;QACpBE,YAAY,CAAC,KAAK,CAAC;QACnBE,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACEJ,aAAa,CAAC,KAAK,CAAC;MACpBE,YAAY,CAAC,KAAK,CAAC;MACnBE,OAAO,CAAC,IAAI,CAAC;IACjB;EACF,CAAC;EAGDf,SAAS,CAAC,MAAM,CAAkB;IAChC;EAAA,CACD,EAAE,EAAE,CAAC;EAGN,oBACEG,OAAA,CAACE,WAAW,CAAC0B,QAAQ;IACnBC,KAAK,EAAE;MACLtB,UAAU;MACVE,SAAS;MACTE,IAAI;MACJE;IACF,CAAE;IAAAiB,QAAA,EAEDzB,KAAK,CAACyB;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B;AAAC5B,EAAA,CA9DQF,mBAAmB;AAAA+B,EAAA,GAAnB/B,mBAAmB;AAgE5B,SAASA,mBAAmB,EAAEF,WAAW;AAAG,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}